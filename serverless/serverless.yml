# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: eggtive
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: eggtive-recall
# "service" is the name of this project. This will also be added to your AWS resource names.
service: eggtive-recall-quiz

plugins:
  - serverless-step-functions
  - serverless-python-requirements
  - serverless-prune-plugin
  - serverless-offline

package:
  individually: true
  patterns:
    - "!./**"
    - "./src/exceptions/**"

custom:
  pythonRequirements:
    dockerizePip: true
    useStaticCache: false
    layer:
      name: ${self:provider.stage}-${self:service}-python-requirements
      description: Python requirements for ${self:service}
      compatibleRuntimes:
        - python3.12
      compatibleArchitectures:
        - arm64
    
  prune:
    automatic: true
    includeLayers: true
    number: 3
  serverless-offline:
    httpPort: 4000
    lambdaPort: 4002

useDotenv: true

provider:
  name: aws
  runtime: python3.12
  region: ap-southeast-1
  stage: ${opt:stage, "dev"}
  architecture: arm64
  timeout: 30
  layers:
    - { Ref: PythonRequirementsLambdaLayer }
  environment:
    STAGE: ${self:provider.stage}

functions:
  generate-quiz:
    handler: src/create_quiz/generate_quiz.handler
    environment:
      OPENAI_API_KEY: ${env:OPENAI_API_KEY}
    package:
      include:
        - src/create_quiz/**

  save-quiz:
    handler: src/create_quiz/save_quiz.handler
    environment:
      MONGODB_PASSWORD: ${env:MONGODB_PASSWORD}
      MONGODB_NAME: ${env:MONGODB_NAME}
    package:
      include:
        - src/create_quiz/**

stepFunctions:
  stateMachines:
    CreateNewQuizStateMachine:
      events:
        - http:
            path: quizzes/create
            method: POST
      definition:
        StartAt: GenerateQuiz
        States:
          GenerateQuiz:
            Type: Task
            Resource:
              Fn::GetAtt: [generate-quiz, Arn]
            Next: SaveQuiz
            Retry:
              - ErrorEquals:
                  - QuizEmptyError
                IntervalSeconds: 2
                MaxAttempts: 3
                BackoffRate: 2
          SaveQuiz:
            Type: Task
            InputPath: "$.body"
            Resource:
              Fn::GetAtt: [save-quiz, Arn]
            End: true
